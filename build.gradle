plugins {
    id 'org.hidetake.swagger.generator' version '2.11.0'
    id "org.sonarqube" version "2.6.2"
}
apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'findbugs'


repositories {
    jcenter()
}

version = "0.0.2"
sourceCompatibility = '1.8'

dependencies {
    compile 'com.sparkjava:spark-core:2.5.5'
    compile 'org.slf4j:slf4j-api:1.6.1'
    compile 'ch.qos.logback:logback-classic:1.0.13'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.3'
    compile 'io.github.cdimascio:java-dotenv:3.0.0'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'com.nimbusds:nimbus-jose-jwt:4.23'
    compile 'com.auth0:jwks-rsa:0.3.0'
    compile 'org.pac4j:spark-pac4j:2.0.0'
    compile 'org.pac4j:pac4j-core:2.0.0'
    compile 'org.pac4j:pac4j-http:2.0.0'
    compile 'org.pac4j:pac4j-jwt:2.0.0'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile "com.github.tomakehurst:wiremock:2.16.0"
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'jenkins-adapter',
                'Implementation-Version': version,
                'Main-Class': 'com.consort.JenkinsAdapterMain'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    with jar
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("testresult/jacoco/html")
    }
}
test {
    reports.junitXml.destination = file("testresult/xml")
    reports.html.destination = file("./gradltestresult/html")
    jacoco {
        append = false
        destinationFile = file("testresult/jacoco/jacocoTest.exec")
    }
}

def env = System.getenv();
sonarqube{
    properties {
        property "sonar.host.url", env.getOrDefault( "SONAR_HOST_URL", "https://cme.dev.k8s.consort-it.de/sonar/")
        property "sonar.login", env.getOrDefault('SONAR_HOST_TOKEN', "")
        property "sonar.projectVersion", getDate()
    }
}

def getDate() {
    def date = new Date()
    return date.format('yyyyMMddHHmmss')
}

swaggerSources {
    jenkinsadapter {
        inputFile = file('swagger-jenkins-adapter.yaml')
    }
}

build.dependsOn(fatJar)
check.dependsOn(validateSwagger)
check.dependsOn("sonarqube")
project.tasks["sonarqube"].dependsOn "test"